库的制作：			
	
	一、静态(.a)：
		编译时载入，拷贝到代码中，代码膨胀
			//库更之后需要重新编译

		1.生成.o
			gcc -c 函数.c -Wall
		
		2.使用ar工具制作静态库
			ar crs lib库名.a 库名.o	//【create(创建) replace(替换) s(索引：方便查找)】
		
		3.编译链接库(使用)
			gcc main.c -L . -l 库名	//-L：链接库，后面跟库的路径	-l：后面跟库名(即lib和.a中间的就是库名)
		
		优点：程序在运行时与函数库再无瓜葛，方便移植
		缺点：浪费空间和资源。库中所有相关对象文件被链接合成一个可执行文件
		
	
	二、动态(.so)(共享库)：
		运行时载入	
		gcc -c -Wall 
		
		动态库的制作和使用：
		1、制作方式：
			1、生成 .o
				gcc -fPIC -Wall -c *.c 			//-fPIC 编译生成与地址无关的程序
			
			2、将 .o 编译生成动态库文件
				gcc -shared *.o -o lib*.so.1	//.1是库的版本号，可以不写
				
			3、创建软链接
				ln -s lib*.so.1 lib*.so			//链接文件不要带版本号
				
		2、动态库的使用
			1、把当前路径添加到环境变量	//只针对当前终端
				export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
					编译：gcc mian.c -L . -l *(如：func)	//libfunc.so

			2、添加/etc/ld.so.conf.d/新.conf文件
				加入库文件所在目录路径
				运行ldconfig
				
			3、如果想将动态库制作成第三方库，在系统的任何路径都可以使用
				将 lib*.so 拷贝到 /usr/lib 或者是 /lib 目录
					编译：gcc main.c -l *(不用加后缀)
				
			//当前路径下，即有动态库也有静态库，gcc默认链接动态库
				-static：链接静态库
				
			//ldd命令可以查看可执行程序依赖的共享库
				eg：ldd /bin/lnlibc.sp.6
			
